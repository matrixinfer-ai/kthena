apiVersion: apps/v1
kind: Deployment
metadata:
  name: kthena-router
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/component: kthena-router
    {{- include "kthena.labels" . | nindent 4 }}
spec:
  replicas: {{.Values.kthenaRouter.replicas}}
  selector:
    matchLabels:
      app.kubernetes.io/component: kthena-router
      {{- include "kthena.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/component: kthena-router
        {{- include "kthena.labels" . | nindent 8 }}
    spec:
      containers:
        - name: kthena-router
          image: "{{ .Values.kthenaRouter.image.repository }}:{{ .Values.kthenaRouter.image.tag }}"
          imagePullPolicy: {{ .Values.kthenaRouter.image.pullPolicy }}
          args:
            - --port={{ .Values.kthenaRouter.port }}
            - --enable-webhook={{ .Values.kthenaRouter.webhook.enabled }}
          {{- if .Values.kthenaRouter.webhook.enabled }}
            - --webhook-port={{ .Values.kthenaRouter.webhook.port }}
            - --webhook-tls-cert-file={{ .Values.kthenaRouter.webhook.tls.certFile }}
            - --webhook-tls-private-key-file={{ .Values.kthenaRouter.webhook.tls.keyFile }}
          {{- end }}
          {{- if and .Values.global.certManager.enabled .Values.kthenaRouter.tls.enabled }}
            - --tls-cert=/etc/tls/tls.crt
            - --tls-key=/etc/tls/tls.key
          {{- end }}
          ports:
            - containerPort: {{ .Values.kthenaRouter.port }}
              name: http
          {{- if .Values.kthenaRouter.webhook.enabled }}
            - containerPort: {{ .Values.kthenaRouter.webhook.port }}
              name: webhook
          {{- end }}
          env:
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  name: redis-config
                  key: REDIS_HOST
                  optional: true
            - name: REDIS_PORT
              valueFrom:
                configMapKeyRef:
                  name: redis-config
                  key: REDIS_PORT
                  optional: true
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-secret
                  key: password
                  optional: true
            # Fairness scheduling configuration
            - name: ENABLE_FAIRNESS_SCHEDULING
              value: {{ .Values.kthenaRouter.fairness.enabled | quote }}
            {{- if .Values.kthenaRouter.fairness.enabled }}
            - name: FAIRNESS_WINDOW_SIZE
              value: {{ .Values.kthenaRouter.fairness.windowSize | quote }}
            - name: FAIRNESS_INPUT_TOKEN_WEIGHT
              value: {{ .Values.kthenaRouter.fairness.inputTokenWeight | quote }}
            - name: FAIRNESS_OUTPUT_TOKEN_WEIGHT
              value: {{ .Values.kthenaRouter.fairness.outputTokenWeight | quote }}
            {{- end }}
            # Access log configuration
            - name: ACCESS_LOG_ENABLED
              value: {{ .Values.kthenaRouter.accessLog.enabled | quote }}
            - name: ACCESS_LOG_FORMAT
              value: {{ .Values.kthenaRouter.accessLog.format | quote }}
            - name: ACCESS_LOG_OUTPUT
              value: {{ .Values.kthenaRouter.accessLog.output | quote }}
          resources: {{- toYaml .Values.kthenaRouter.resource | nindent 12 }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.kthenaRouter.port }}
              {{- if and .Values.global.certManager.enabled .Values.kthenaRouter.tls.enabled }}
              scheme: HTTPS
              {{- end }}
            initialDelaySeconds: 1
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.kthenaRouter.port }}
              {{- if and .Values.global.certManager.enabled .Values.kthenaRouter.tls.enabled }}
              scheme: HTTPS
              {{- end }}
            initialDelaySeconds: 1
            periodSeconds: 5
          volumeMounts:
          - name: scheduler-config
            mountPath: /etc/config/routerConfiguration.yaml
            subPath: routerConfiguration
          {{- if and .Values.global.certManager.enabled .Values.kthenaRouter.tls.enabled }}
          - name: tls-certs
            mountPath: "/etc/tls"
            readOnly: true
          {{- end }}
          {{- if .Values.kthenaRouter.webhook.enabled }}
          - name: webhook-certs
            mountPath: /etc/webhook/certs
            readOnly: true
          {{- end }}
      volumes:
        - name: scheduler-config
          configMap:
            name: {{ include "kthena.name" . }}-kthena-router-config
        {{- if and .Values.global.certManager.enabled .Values.kthenaRouter.tls.enabled }}
        - name: tls-certs
          secret:
            secretName: {{ .Values.kthenaRouter.tls.secretName }}
        {{- end }}
        {{- if .Values.kthenaRouter.webhook.enabled }}
        - name: webhook-certs
          secret:
            secretName: {{ .Values.kthenaRouter.webhook.tls.secretName }}
        {{- end }}
      serviceAccountName:  {{ include "kthena.name" . }}-kthena-router
