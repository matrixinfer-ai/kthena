---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.17.2
  name: modelservers.networking.matrixinfer.ai
spec:
  group: networking.matrixinfer.ai
  names:
    kind: ModelServer
    listKind: ModelServerList
    plural: modelservers
    singular: modelserver
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ModelServer is the Schema for the modelservers API.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: ModelServerSpec defines the desired state of ModelServer.
            properties:
              inferenceEngine:
                description: The inference engine used to serve the model.
                enum:
                - vLLM
                - SGLang
                type: string
              jwtRules:
                description: JWTRules define the JWT Authentication configuration.
                items:
                  description: This crd is refer to https://github.com/istio/api/blob/master/security/v1beta1/request_authentication.proto
                  properties:
                    audience:
                      description: Audiences are the expected audiences of the JWT
                        token.
                      items:
                        type: string
                      type: array
                    fromHeader:
                      description: |-
                        FromHeader specifies the header to extract the JWT from.
                        if JWT is expected to be found in `x-jwt-assertion` header, and have `Bearer` prefix:

                        ```yaml

                         fromHeader:
                           name: x-jwt-assertion
                           prefix: "Bearer "

                        ```
                      properties:
                        name:
                          description: The Http Header name to extract the JWT from.
                          minLength: 1
                          type: string
                        prefix:
                          description: |-
                            The prefix that should be stripped before decoding the token.
                            For example, if the header is "Authorization: Bearer <token>" and the prefix is "Bearer ", the token will be decoded from the "Authorization" header.
                            If the header doesn't have this exact prefix, it is considered invalid.
                          type: string
                      type: object
                    fromParam:
                      description: |-
                        FromParam specifies the query body parameter to extract the JWT from.
                        parameter `my_token` (e.g `/path?my_token=<JWT>`), the config is:

                        ```yaml

                         fromParam: "my_token"

                        ```
                      type: string
                    issuer:
                      description: Identifies the issuer that issued the JWT.
                      type: string
                    jwkExpiredTime:
                      default: 30m
                      description: |-
                        JwksExpiredTime is the expired time that JWKs to be fetched.
                        Defaults to 30 minutes.
                        When the validation time exceeds expiredTime, if the validation of the JWT fails, the jwks will be updated and then validated again
                      type: string
                    jwks:
                      description: |-
                        JSON Web Key Set of public keys to validate signature of the JWT.
                        See https://auth0.com/docs/jwks.

                        Note: Only one of `jwksUri` and `jwks` should be used.
                      type: string
                    jwksURI:
                      description: JWKSURI is the uri to fetch JWKS keys.
                      type: string
                  type: object
                type: array
              kvConnector:
                description: KVConnector specifies the KV connector configuration
                  for PD disaggregated routing
                properties:
                  type:
                    default: http
                    description: |-
                      Type specifies the connector type.
                      If you donot know which type to use, please use "http" as default.
                    enum:
                    - http
                    - lmcache
                    - nixl
                    - mooncake
                    type: string
                type: object
              model:
                description: |-
                  The real model that the modelServers are running.
                  If the `model` in LLM inference request is different from this field, it should be overwritten by this field.
                  Otherwise, the `model` in LLM inference request will not be mutated.
                maxLength: 256
                type: string
              trafficPolicy:
                description: Traffic Policy for accessing the model server instance.
                properties:
                  retry:
                    description: The retry policy for the inference request.
                    properties:
                      attempts:
                        description: |-
                          The maximum number of times an individual inference request to a model server should be retried.
                          If the maximum number of retries has been done without a successgful response, the request will be considered failed.
                        format: int32
                        type: integer
                      retryInterval:
                        default: 100ms
                        description: RetryInterval is the interval between retries.
                        type: string
                    type: object
                  timeout:
                    description: |-
                      The request timeout for the inference request.
                      By default, there is no timeout.
                    type: string
                type: object
              workloadPort:
                description: WorkloadPort defines the port and protocol configuration
                  for the model server.
                properties:
                  port:
                    description: The port of the model server. The number must be
                      between 1 and 65535.
                    format: int32
                    maximum: 65535
                    minimum: 1
                    type: integer
                  protocol:
                    default: http
                    description: The protocol of the model server. Supported values
                      are "http" and "https".
                    enum:
                    - http
                    - https
                    type: string
                required:
                - port
                type: object
              workloadSelector:
                description: |-
                  WorkloadSelector is used to match the model serving instances.
                  Currently, they must be pods within the same namespace as modelServer object.
                properties:
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: |-
                      The base labels to match the model serving instances.
                      All serving instances must match these labels.
                    type: object
                  pdGroup:
                    description: |-
                      PDGroup is used to further match different roles of the model serving instances,
                      mainly used in case like PD disaggregation.
                    properties:
                      decodeLabels:
                        additionalProperties:
                          type: string
                        description: The labels to match the model serving instances
                          for decode.
                        type: object
                      groupKey:
                        description: |-
                          GroupKey is the key to distinguish different PD groups.
                          Only PD instances with the same group key and value could be paired.
                        type: string
                      prefillLabels:
                        additionalProperties:
                          type: string
                        description: The labels to match the model serving instances
                          for prefill.
                        type: object
                    required:
                    - decodeLabels
                    - groupKey
                    - prefillLabels
                    type: object
                type: object
            required:
            - inferenceEngine
            - workloadSelector
            type: object
          status:
            description: ModelServerStatus defines the observed state of ModelServer.
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
