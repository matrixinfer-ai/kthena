/*
Copyright The Volcano Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// PDGroupApplyConfiguration represents a declarative configuration of the PDGroup type for use
// with apply.
type PDGroupApplyConfiguration struct {
	GroupKey      *string           `json:"groupKey,omitempty"`
	PrefillLabels map[string]string `json:"prefillLabels,omitempty"`
	DecodeLabels  map[string]string `json:"decodeLabels,omitempty"`
}

// PDGroupApplyConfiguration constructs a declarative configuration of the PDGroup type for use with
// apply.
func PDGroup() *PDGroupApplyConfiguration {
	return &PDGroupApplyConfiguration{}
}

// WithGroupKey sets the GroupKey field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GroupKey field is set to the value of the last call.
func (b *PDGroupApplyConfiguration) WithGroupKey(value string) *PDGroupApplyConfiguration {
	b.GroupKey = &value
	return b
}

// WithPrefillLabels puts the entries into the PrefillLabels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the PrefillLabels field,
// overwriting an existing map entries in PrefillLabels field with the same key.
func (b *PDGroupApplyConfiguration) WithPrefillLabels(entries map[string]string) *PDGroupApplyConfiguration {
	if b.PrefillLabels == nil && len(entries) > 0 {
		b.PrefillLabels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.PrefillLabels[k] = v
	}
	return b
}

// WithDecodeLabels puts the entries into the DecodeLabels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the DecodeLabels field,
// overwriting an existing map entries in DecodeLabels field with the same key.
func (b *PDGroupApplyConfiguration) WithDecodeLabels(entries map[string]string) *PDGroupApplyConfiguration {
	if b.DecodeLabels == nil && len(entries) > 0 {
		b.DecodeLabels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.DecodeLabels[k] = v
	}
	return b
}
