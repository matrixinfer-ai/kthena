/*
Copyright The Volcano Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	networkingv1alpha1 "github.com/volcano-sh/kthena/pkg/apis/networking/v1alpha1"
)

// ModelServerSpecApplyConfiguration represents a declarative configuration of the ModelServerSpec type for use
// with apply.
type ModelServerSpecApplyConfiguration struct {
	Model            *string                             `json:"model,omitempty"`
	InferenceEngine  *networkingv1alpha1.InferenceEngine `json:"inferenceEngine,omitempty"`
	WorkloadSelector *WorkloadSelectorApplyConfiguration `json:"workloadSelector,omitempty"`
	WorkloadPort     *WorkloadPortApplyConfiguration     `json:"workloadPort,omitempty"`
	TrafficPolicy    *TrafficPolicyApplyConfiguration    `json:"trafficPolicy,omitempty"`
	KVConnector      *KVConnectorSpecApplyConfiguration  `json:"kvConnector,omitempty"`
}

// ModelServerSpecApplyConfiguration constructs a declarative configuration of the ModelServerSpec type for use with
// apply.
func ModelServerSpec() *ModelServerSpecApplyConfiguration {
	return &ModelServerSpecApplyConfiguration{}
}

// WithModel sets the Model field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Model field is set to the value of the last call.
func (b *ModelServerSpecApplyConfiguration) WithModel(value string) *ModelServerSpecApplyConfiguration {
	b.Model = &value
	return b
}

// WithInferenceEngine sets the InferenceEngine field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InferenceEngine field is set to the value of the last call.
func (b *ModelServerSpecApplyConfiguration) WithInferenceEngine(value networkingv1alpha1.InferenceEngine) *ModelServerSpecApplyConfiguration {
	b.InferenceEngine = &value
	return b
}

// WithWorkloadSelector sets the WorkloadSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WorkloadSelector field is set to the value of the last call.
func (b *ModelServerSpecApplyConfiguration) WithWorkloadSelector(value *WorkloadSelectorApplyConfiguration) *ModelServerSpecApplyConfiguration {
	b.WorkloadSelector = value
	return b
}

// WithWorkloadPort sets the WorkloadPort field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WorkloadPort field is set to the value of the last call.
func (b *ModelServerSpecApplyConfiguration) WithWorkloadPort(value *WorkloadPortApplyConfiguration) *ModelServerSpecApplyConfiguration {
	b.WorkloadPort = value
	return b
}

// WithTrafficPolicy sets the TrafficPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TrafficPolicy field is set to the value of the last call.
func (b *ModelServerSpecApplyConfiguration) WithTrafficPolicy(value *TrafficPolicyApplyConfiguration) *ModelServerSpecApplyConfiguration {
	b.TrafficPolicy = value
	return b
}

// WithKVConnector sets the KVConnector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the KVConnector field is set to the value of the last call.
func (b *ModelServerSpecApplyConfiguration) WithKVConnector(value *KVConnectorSpecApplyConfiguration) *ModelServerSpecApplyConfiguration {
	b.KVConnector = value
	return b
}
