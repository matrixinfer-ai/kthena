/*
Copyright MatrixInfer-AI Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// JWTRuleApplyConfiguration represents a declarative configuration of the JWTRule type for use
// with apply.
type JWTRuleApplyConfiguration struct {
	Issuer     *string                       `json:"issuer,omitempty"`
	Audiences  []string                      `json:"audience,omitempty"`
	JwksURI    *string                       `json:"jwksURI,omitempty"`
	Jwks       *string                       `json:"jwks,omitempty"`
	FromHeader []JWTHeaderApplyConfiguration `json:"fromHeader,omitempty"`
	FromParams []string                      `json:"fromParams,omitempty"`
}

// JWTRuleApplyConfiguration constructs a declarative configuration of the JWTRule type for use with
// apply.
func JWTRule() *JWTRuleApplyConfiguration {
	return &JWTRuleApplyConfiguration{}
}

// WithIssuer sets the Issuer field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Issuer field is set to the value of the last call.
func (b *JWTRuleApplyConfiguration) WithIssuer(value string) *JWTRuleApplyConfiguration {
	b.Issuer = &value
	return b
}

// WithAudiences adds the given value to the Audiences field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Audiences field.
func (b *JWTRuleApplyConfiguration) WithAudiences(values ...string) *JWTRuleApplyConfiguration {
	for i := range values {
		b.Audiences = append(b.Audiences, values[i])
	}
	return b
}

// WithJwksURI sets the JwksURI field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the JwksURI field is set to the value of the last call.
func (b *JWTRuleApplyConfiguration) WithJwksURI(value string) *JWTRuleApplyConfiguration {
	b.JwksURI = &value
	return b
}

// WithJwks sets the Jwks field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Jwks field is set to the value of the last call.
func (b *JWTRuleApplyConfiguration) WithJwks(value string) *JWTRuleApplyConfiguration {
	b.Jwks = &value
	return b
}

// WithFromHeader adds the given value to the FromHeader field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the FromHeader field.
func (b *JWTRuleApplyConfiguration) WithFromHeader(values ...*JWTHeaderApplyConfiguration) *JWTRuleApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithFromHeader")
		}
		b.FromHeader = append(b.FromHeader, *values[i])
	}
	return b
}

// WithFromParams adds the given value to the FromParams field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the FromParams field.
func (b *JWTRuleApplyConfiguration) WithFromParams(values ...string) *JWTRuleApplyConfiguration {
	for i := range values {
		b.FromParams = append(b.FromParams, values[i])
	}
	return b
}
