/*
Copyright MatrixInfer-AI Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
)

// ModelSpecApplyConfiguration represents a declarative configuration of the ModelSpec type for use
// with apply.
type ModelSpecApplyConfiguration struct {
	Name                     *string                          `json:"name,omitempty"`
	Owner                    *string                          `json:"owner,omitempty"`
	Backends                 []ModelBackendApplyConfiguration `json:"backends,omitempty"`
	AutoscalingPolicyRef     *v1.LocalObjectReference         `json:"autoscalingPolicyRef,omitempty"`
	CostExpansionRatePercent *int32                           `json:"costExpansionRatePercent,omitempty"`
}

// ModelSpecApplyConfiguration constructs a declarative configuration of the ModelSpec type for use with
// apply.
func ModelSpec() *ModelSpecApplyConfiguration {
	return &ModelSpecApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ModelSpecApplyConfiguration) WithName(value string) *ModelSpecApplyConfiguration {
	b.Name = &value
	return b
}

// WithOwner sets the Owner field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Owner field is set to the value of the last call.
func (b *ModelSpecApplyConfiguration) WithOwner(value string) *ModelSpecApplyConfiguration {
	b.Owner = &value
	return b
}

// WithBackends adds the given value to the Backends field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Backends field.
func (b *ModelSpecApplyConfiguration) WithBackends(values ...*ModelBackendApplyConfiguration) *ModelSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithBackends")
		}
		b.Backends = append(b.Backends, *values[i])
	}
	return b
}

// WithAutoscalingPolicyRef sets the AutoscalingPolicyRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AutoscalingPolicyRef field is set to the value of the last call.
func (b *ModelSpecApplyConfiguration) WithAutoscalingPolicyRef(value v1.LocalObjectReference) *ModelSpecApplyConfiguration {
	b.AutoscalingPolicyRef = &value
	return b
}

// WithCostExpansionRatePercent sets the CostExpansionRatePercent field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CostExpansionRatePercent field is set to the value of the last call.
func (b *ModelSpecApplyConfiguration) WithCostExpansionRatePercent(value int32) *ModelSpecApplyConfiguration {
	b.CostExpansionRatePercent = &value
	return b
}
