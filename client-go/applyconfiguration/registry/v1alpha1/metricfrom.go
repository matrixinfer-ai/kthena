/*
Copyright MatrixInfer-AI Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// MetricFromApplyConfiguration represents a declarative configuration of the MetricFrom type for use
// with apply.
type MetricFromApplyConfiguration struct {
	Uri         *string           `json:"url,omitempty"`
	Port        *int32            `json:"port,omitempty"`
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

// MetricFromApplyConfiguration constructs a declarative configuration of the MetricFrom type for use with
// apply.
func MetricFrom() *MetricFromApplyConfiguration {
	return &MetricFromApplyConfiguration{}
}

// WithUri sets the Uri field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Uri field is set to the value of the last call.
func (b *MetricFromApplyConfiguration) WithUri(value string) *MetricFromApplyConfiguration {
	b.Uri = &value
	return b
}

// WithPort sets the Port field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Port field is set to the value of the last call.
func (b *MetricFromApplyConfiguration) WithPort(value int32) *MetricFromApplyConfiguration {
	b.Port = &value
	return b
}

// WithMatchLabels puts the entries into the MatchLabels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the MatchLabels field,
// overwriting an existing map entries in MatchLabels field with the same key.
func (b *MetricFromApplyConfiguration) WithMatchLabels(entries map[string]string) *MetricFromApplyConfiguration {
	if b.MatchLabels == nil && len(entries) > 0 {
		b.MatchLabels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.MatchLabels[k] = v
	}
	return b
}
