/*
Copyright The Volcano Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1beta1 "volcano.sh/apis/pkg/apis/scheduling/v1beta1"
)

// ServingGroupApplyConfiguration represents a declarative configuration of the ServingGroup type for use
// with apply.
type ServingGroupApplyConfiguration struct {
	RestartGracePeriodSeconds *int64                        `json:"restartGracePeriodSeconds,omitempty"`
	GangPolicy                *GangPolicyApplyConfiguration `json:"gangPolicy,omitempty"`
	NetworkTopology           *v1beta1.NetworkTopologySpec  `json:"networkTopology,omitempty"`
	Roles                     []RoleApplyConfiguration      `json:"roles,omitempty"`
}

// ServingGroupApplyConfiguration constructs a declarative configuration of the ServingGroup type for use with
// apply.
func ServingGroup() *ServingGroupApplyConfiguration {
	return &ServingGroupApplyConfiguration{}
}

// WithRestartGracePeriodSeconds sets the RestartGracePeriodSeconds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RestartGracePeriodSeconds field is set to the value of the last call.
func (b *ServingGroupApplyConfiguration) WithRestartGracePeriodSeconds(value int64) *ServingGroupApplyConfiguration {
	b.RestartGracePeriodSeconds = &value
	return b
}

// WithGangPolicy sets the GangPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GangPolicy field is set to the value of the last call.
func (b *ServingGroupApplyConfiguration) WithGangPolicy(value *GangPolicyApplyConfiguration) *ServingGroupApplyConfiguration {
	b.GangPolicy = value
	return b
}

// WithNetworkTopology sets the NetworkTopology field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NetworkTopology field is set to the value of the last call.
func (b *ServingGroupApplyConfiguration) WithNetworkTopology(value v1beta1.NetworkTopologySpec) *ServingGroupApplyConfiguration {
	b.NetworkTopology = &value
	return b
}

// WithRoles adds the given value to the Roles field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Roles field.
func (b *ServingGroupApplyConfiguration) WithRoles(values ...*RoleApplyConfiguration) *ServingGroupApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithRoles")
		}
		b.Roles = append(b.Roles, *values[i])
	}
	return b
}
