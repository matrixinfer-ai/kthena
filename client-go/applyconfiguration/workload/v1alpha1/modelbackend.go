/*
Copyright The Volcano Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	workloadv1alpha1 "github.com/volcano-sh/kthena/pkg/apis/workload/v1alpha1"
	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ModelBackendApplyConfiguration represents a declarative configuration of the ModelBackend type for use
// with apply.
type ModelBackendApplyConfiguration struct {
	Name                   *string                                  `json:"name,omitempty"`
	Type                   *workloadv1alpha1.ModelBackendType       `json:"type,omitempty"`
	ModelURI               *string                                  `json:"modelURI,omitempty"`
	CacheURI               *string                                  `json:"cacheURI,omitempty"`
	EnvFrom                []v1.EnvFromSource                       `json:"envFrom,omitempty"`
	Env                    []v1.EnvVar                              `json:"env,omitempty"`
	MinReplicas            *int32                                   `json:"minReplicas,omitempty"`
	MaxReplicas            *int32                                   `json:"maxReplicas,omitempty"`
	ScalingCost            *int32                                   `json:"scalingCost,omitempty"`
	RouteWeight            *uint32                                  `json:"routeWeight,omitempty"`
	ScaleToZeroGracePeriod *metav1.Duration                         `json:"scaleToZeroGracePeriod,omitempty"`
	Workers                []ModelWorkerApplyConfiguration          `json:"workers,omitempty"`
	LoraAdapters           []LoraAdapterApplyConfiguration          `json:"loraAdapters,omitempty"`
	AutoscalingPolicy      *AutoscalingPolicySpecApplyConfiguration `json:"autoscalingPolicy,omitempty"`
}

// ModelBackendApplyConfiguration constructs a declarative configuration of the ModelBackend type for use with
// apply.
func ModelBackend() *ModelBackendApplyConfiguration {
	return &ModelBackendApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ModelBackendApplyConfiguration) WithName(value string) *ModelBackendApplyConfiguration {
	b.Name = &value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *ModelBackendApplyConfiguration) WithType(value workloadv1alpha1.ModelBackendType) *ModelBackendApplyConfiguration {
	b.Type = &value
	return b
}

// WithModelURI sets the ModelURI field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ModelURI field is set to the value of the last call.
func (b *ModelBackendApplyConfiguration) WithModelURI(value string) *ModelBackendApplyConfiguration {
	b.ModelURI = &value
	return b
}

// WithCacheURI sets the CacheURI field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CacheURI field is set to the value of the last call.
func (b *ModelBackendApplyConfiguration) WithCacheURI(value string) *ModelBackendApplyConfiguration {
	b.CacheURI = &value
	return b
}

// WithEnvFrom adds the given value to the EnvFrom field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the EnvFrom field.
func (b *ModelBackendApplyConfiguration) WithEnvFrom(values ...v1.EnvFromSource) *ModelBackendApplyConfiguration {
	for i := range values {
		b.EnvFrom = append(b.EnvFrom, values[i])
	}
	return b
}

// WithEnv adds the given value to the Env field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Env field.
func (b *ModelBackendApplyConfiguration) WithEnv(values ...v1.EnvVar) *ModelBackendApplyConfiguration {
	for i := range values {
		b.Env = append(b.Env, values[i])
	}
	return b
}

// WithMinReplicas sets the MinReplicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MinReplicas field is set to the value of the last call.
func (b *ModelBackendApplyConfiguration) WithMinReplicas(value int32) *ModelBackendApplyConfiguration {
	b.MinReplicas = &value
	return b
}

// WithMaxReplicas sets the MaxReplicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxReplicas field is set to the value of the last call.
func (b *ModelBackendApplyConfiguration) WithMaxReplicas(value int32) *ModelBackendApplyConfiguration {
	b.MaxReplicas = &value
	return b
}

// WithScalingCost sets the ScalingCost field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ScalingCost field is set to the value of the last call.
func (b *ModelBackendApplyConfiguration) WithScalingCost(value int32) *ModelBackendApplyConfiguration {
	b.ScalingCost = &value
	return b
}

// WithRouteWeight sets the RouteWeight field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RouteWeight field is set to the value of the last call.
func (b *ModelBackendApplyConfiguration) WithRouteWeight(value uint32) *ModelBackendApplyConfiguration {
	b.RouteWeight = &value
	return b
}

// WithScaleToZeroGracePeriod sets the ScaleToZeroGracePeriod field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ScaleToZeroGracePeriod field is set to the value of the last call.
func (b *ModelBackendApplyConfiguration) WithScaleToZeroGracePeriod(value metav1.Duration) *ModelBackendApplyConfiguration {
	b.ScaleToZeroGracePeriod = &value
	return b
}

// WithWorkers adds the given value to the Workers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Workers field.
func (b *ModelBackendApplyConfiguration) WithWorkers(values ...*ModelWorkerApplyConfiguration) *ModelBackendApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithWorkers")
		}
		b.Workers = append(b.Workers, *values[i])
	}
	return b
}

// WithLoraAdapters adds the given value to the LoraAdapters field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the LoraAdapters field.
func (b *ModelBackendApplyConfiguration) WithLoraAdapters(values ...*LoraAdapterApplyConfiguration) *ModelBackendApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithLoraAdapters")
		}
		b.LoraAdapters = append(b.LoraAdapters, *values[i])
	}
	return b
}

// WithAutoscalingPolicy sets the AutoscalingPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AutoscalingPolicy field is set to the value of the last call.
func (b *ModelBackendApplyConfiguration) WithAutoscalingPolicy(value *AutoscalingPolicySpecApplyConfiguration) *ModelBackendApplyConfiguration {
	b.AutoscalingPolicy = value
	return b
}
