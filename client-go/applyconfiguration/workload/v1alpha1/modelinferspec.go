/*
Copyright The Volcano Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	workloadv1alpha1 "github.com/volcano-sh/kthena/pkg/apis/workload/v1alpha1"
)

// ModelInferSpecApplyConfiguration represents a declarative configuration of the ModelInferSpec type for use
// with apply.
type ModelInferSpecApplyConfiguration struct {
	Replicas                  *int32                                       `json:"replicas,omitempty"`
	SchedulerName             *string                                      `json:"schedulerName,omitempty"`
	Template                  *InferGroupApplyConfiguration                `json:"template,omitempty"`
	RolloutStrategy           *RolloutStrategyApplyConfiguration           `json:"rolloutStrategy,omitempty"`
	RecoveryPolicy            *workloadv1alpha1.RecoveryPolicy             `json:"recoveryPolicy,omitempty"`
	TopologySpreadConstraints []TopologySpreadConstraintApplyConfiguration `json:"topologySpreadConstraints,omitempty"`
}

// ModelInferSpecApplyConfiguration constructs a declarative configuration of the ModelInferSpec type for use with
// apply.
func ModelInferSpec() *ModelInferSpecApplyConfiguration {
	return &ModelInferSpecApplyConfiguration{}
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *ModelInferSpecApplyConfiguration) WithReplicas(value int32) *ModelInferSpecApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithSchedulerName sets the SchedulerName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SchedulerName field is set to the value of the last call.
func (b *ModelInferSpecApplyConfiguration) WithSchedulerName(value string) *ModelInferSpecApplyConfiguration {
	b.SchedulerName = &value
	return b
}

// WithTemplate sets the Template field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Template field is set to the value of the last call.
func (b *ModelInferSpecApplyConfiguration) WithTemplate(value *InferGroupApplyConfiguration) *ModelInferSpecApplyConfiguration {
	b.Template = value
	return b
}

// WithRolloutStrategy sets the RolloutStrategy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RolloutStrategy field is set to the value of the last call.
func (b *ModelInferSpecApplyConfiguration) WithRolloutStrategy(value *RolloutStrategyApplyConfiguration) *ModelInferSpecApplyConfiguration {
	b.RolloutStrategy = value
	return b
}

// WithRecoveryPolicy sets the RecoveryPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RecoveryPolicy field is set to the value of the last call.
func (b *ModelInferSpecApplyConfiguration) WithRecoveryPolicy(value workloadv1alpha1.RecoveryPolicy) *ModelInferSpecApplyConfiguration {
	b.RecoveryPolicy = &value
	return b
}

// WithTopologySpreadConstraints adds the given value to the TopologySpreadConstraints field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the TopologySpreadConstraints field.
func (b *ModelInferSpecApplyConfiguration) WithTopologySpreadConstraints(values ...*TopologySpreadConstraintApplyConfiguration) *ModelInferSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithTopologySpreadConstraints")
		}
		b.TopologySpreadConstraints = append(b.TopologySpreadConstraints, *values[i])
	}
	return b
}
