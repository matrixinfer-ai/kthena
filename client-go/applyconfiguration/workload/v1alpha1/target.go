/*
Copyright The Volcano Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
)

// TargetApplyConfiguration represents a declarative configuration of the Target type for use
// with apply.
type TargetApplyConfiguration struct {
	TargetRef             *v1.ObjectReference               `json:"targetRef,omitempty"`
	AdditionalMatchLabels map[string]string                 `json:"additionalMatchLabels,omitempty"`
	MetricEndpoint        *MetricEndpointApplyConfiguration `json:"metricEndpoint,omitempty"`
}

// TargetApplyConfiguration constructs a declarative configuration of the Target type for use with
// apply.
func Target() *TargetApplyConfiguration {
	return &TargetApplyConfiguration{}
}

// WithTargetRef sets the TargetRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TargetRef field is set to the value of the last call.
func (b *TargetApplyConfiguration) WithTargetRef(value v1.ObjectReference) *TargetApplyConfiguration {
	b.TargetRef = &value
	return b
}

// WithAdditionalMatchLabels puts the entries into the AdditionalMatchLabels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the AdditionalMatchLabels field,
// overwriting an existing map entries in AdditionalMatchLabels field with the same key.
func (b *TargetApplyConfiguration) WithAdditionalMatchLabels(entries map[string]string) *TargetApplyConfiguration {
	if b.AdditionalMatchLabels == nil && len(entries) > 0 {
		b.AdditionalMatchLabels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.AdditionalMatchLabels[k] = v
	}
	return b
}

// WithMetricEndpoint sets the MetricEndpoint field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MetricEndpoint field is set to the value of the last call.
func (b *TargetApplyConfiguration) WithMetricEndpoint(value *MetricEndpointApplyConfiguration) *TargetApplyConfiguration {
	b.MetricEndpoint = value
	return b
}
