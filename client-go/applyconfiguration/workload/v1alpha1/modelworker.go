/*
Copyright The Volcano Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	workloadv1alpha1 "github.com/volcano-sh/kthena/pkg/apis/workload/v1alpha1"
	v1 "k8s.io/api/core/v1"
	apiextensionsv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
)

// ModelWorkerApplyConfiguration represents a declarative configuration of the ModelWorker type for use
// with apply.
type ModelWorkerApplyConfiguration struct {
	Type      *workloadv1alpha1.ModelWorkerType `json:"type,omitempty"`
	Image     *string                           `json:"image,omitempty"`
	Replicas  *int32                            `json:"replicas,omitempty"`
	Pods      *int32                            `json:"pods,omitempty"`
	Resources *v1.ResourceRequirements          `json:"resources,omitempty"`
	Affinity  *v1.Affinity                      `json:"affinity,omitempty"`
	Config    *apiextensionsv1.JSON             `json:"config,omitempty"`
}

// ModelWorkerApplyConfiguration constructs a declarative configuration of the ModelWorker type for use with
// apply.
func ModelWorker() *ModelWorkerApplyConfiguration {
	return &ModelWorkerApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *ModelWorkerApplyConfiguration) WithType(value workloadv1alpha1.ModelWorkerType) *ModelWorkerApplyConfiguration {
	b.Type = &value
	return b
}

// WithImage sets the Image field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Image field is set to the value of the last call.
func (b *ModelWorkerApplyConfiguration) WithImage(value string) *ModelWorkerApplyConfiguration {
	b.Image = &value
	return b
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *ModelWorkerApplyConfiguration) WithReplicas(value int32) *ModelWorkerApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithPods sets the Pods field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Pods field is set to the value of the last call.
func (b *ModelWorkerApplyConfiguration) WithPods(value int32) *ModelWorkerApplyConfiguration {
	b.Pods = &value
	return b
}

// WithResources sets the Resources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resources field is set to the value of the last call.
func (b *ModelWorkerApplyConfiguration) WithResources(value v1.ResourceRequirements) *ModelWorkerApplyConfiguration {
	b.Resources = &value
	return b
}

// WithAffinity sets the Affinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Affinity field is set to the value of the last call.
func (b *ModelWorkerApplyConfiguration) WithAffinity(value v1.Affinity) *ModelWorkerApplyConfiguration {
	b.Affinity = &value
	return b
}

// WithConfig sets the Config field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Config field is set to the value of the last call.
func (b *ModelWorkerApplyConfiguration) WithConfig(value apiextensionsv1.JSON) *ModelWorkerApplyConfiguration {
	b.Config = &value
	return b
}
